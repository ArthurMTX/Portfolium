"""initial_schema

Revision ID: 23573f948586
Revises: 
Create Date: 2025-10-31 15:20:16.976046

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '23573f948586'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('config')
    op.alter_column('assets', 'symbol',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               schema='portfolio')
    op.alter_column('assets', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'currency',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'USD'::text"),
               schema='portfolio')
    op.alter_column('assets', 'class',
               existing_type=postgresql.ENUM('stock', 'etf', 'crypto', 'cash', name='asset_class', schema='portfolio'),
               type_=sa.Enum('stock', 'etf', 'crypto', 'cash', name='assetclass'),
               existing_nullable=True,
               existing_server_default=sa.text("'stock'::portfolio.asset_class"),
               schema='portfolio')
    op.alter_column('assets', 'sector',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'industry',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'asset_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'country',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'logo_data',
               existing_type=postgresql.BYTEA(),
               comment=None,
               existing_comment='Binary logo data (WebP or SVG format)',
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'logo_content_type',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='MIME type of the logo (e.g., image/webp, image/svg+xml)',
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'logo_fetched_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Timestamp when the logo was last fetched/cached',
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'first_transaction_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Date of first transaction for this asset, used to determine when to start fetching historical prices',
               existing_nullable=True,
               schema='portfolio')
    op.drop_constraint(op.f('assets_symbol_key'), 'assets', schema='portfolio', type_='unique')
    op.drop_index(op.f('idx_assets_class'), table_name='assets', schema='portfolio')
    op.drop_index(op.f('idx_assets_country'), table_name='assets', schema='portfolio')
    op.drop_index(op.f('idx_assets_industry'), table_name='assets', schema='portfolio')
    op.drop_index(op.f('idx_assets_logo_fetched'), table_name='assets', schema='portfolio', postgresql_where='(logo_fetched_at IS NOT NULL)')
    op.drop_index(op.f('idx_assets_sector'), table_name='assets', schema='portfolio')
    op.drop_index(op.f('idx_assets_symbol'), table_name='assets', schema='portfolio')
    op.create_index(op.f('ix_portfolio_assets_id'), 'assets', ['id'], unique=False, schema='portfolio')
    op.create_index(op.f('ix_portfolio_assets_symbol'), 'assets', ['symbol'], unique=True, schema='portfolio')
    op.drop_table_comment(
        'assets',
        existing_comment='Financial assets with Yahoo Finance ticker symbols',
        schema='portfolio'
    )
    op.alter_column('notifications', 'type',
               existing_type=postgresql.ENUM('TRANSACTION_CREATED', 'TRANSACTION_UPDATED', 'TRANSACTION_DELETED', 'LOGIN', 'PRICE_ALERT', 'SYSTEM', 'DAILY_CHANGE_UP', 'DAILY_CHANGE_DOWN', name='notification_type', schema='portfolio'),
               type_=sa.Enum('TRANSACTION_CREATED', 'TRANSACTION_UPDATED', 'TRANSACTION_DELETED', 'LOGIN', 'PRICE_ALERT', 'DAILY_CHANGE_UP', 'DAILY_CHANGE_DOWN', 'SYSTEM', name='notificationtype'),
               existing_nullable=False,
               schema='portfolio')
    op.alter_column('notifications', 'title',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               schema='portfolio')
    op.alter_column('notifications', 'metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               comment=None,
               existing_comment='Additional notification data (e.g., IP address for login, asset info for transactions)',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"),
               schema='portfolio')
    op.drop_index(op.f('idx_notifications_created_at'), table_name='notifications', schema='portfolio')
    op.drop_index(op.f('idx_notifications_is_read'), table_name='notifications', schema='portfolio')
    op.drop_index(op.f('idx_notifications_user'), table_name='notifications', schema='portfolio')
    op.drop_index(op.f('idx_notifications_user_read'), table_name='notifications', schema='portfolio')
    op.create_index(op.f('ix_portfolio_notifications_created_at'), 'notifications', ['created_at'], unique=False, schema='portfolio')
    op.create_index(op.f('ix_portfolio_notifications_id'), 'notifications', ['id'], unique=False, schema='portfolio')
    op.drop_table_comment(
        'notifications',
        existing_comment='User notifications for transaction, login, and price alert events',
        schema='portfolio'
    )
    op.alter_column('portfolios', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               schema='portfolio')
    op.alter_column('portfolios', 'base_currency',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'EUR'::text"),
               schema='portfolio')
    op.drop_index(op.f('idx_portfolios_name'), table_name='portfolios', schema='portfolio')
    op.drop_index(op.f('idx_portfolios_user'), table_name='portfolios', schema='portfolio')
    op.drop_constraint(op.f('portfolios_user_id_name_key'), 'portfolios', schema='portfolio', type_='unique')
    op.create_index(op.f('ix_portfolio_portfolios_id'), 'portfolios', ['id'], unique=False, schema='portfolio')
    op.create_index(op.f('ix_portfolio_portfolios_name'), 'portfolios', ['name'], unique=False, schema='portfolio')
    op.drop_table_comment(
        'portfolios',
        existing_comment='User investment portfolios',
        schema='portfolio'
    )
    op.alter_column('prices', 'source',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'yfinance'::text"),
               schema='portfolio')
    op.drop_index(op.f('idx_prices_asof'), table_name='prices', schema='portfolio')
    op.drop_index(op.f('idx_prices_asset_asof'), table_name='prices', schema='portfolio')
    op.drop_index(op.f('idx_prices_asset_date_range'), table_name='prices', schema='portfolio')
    op.drop_index(op.f('idx_prices_source'), table_name='prices', schema='portfolio')
    op.create_index(op.f('ix_portfolio_prices_asof'), 'prices', ['asof'], unique=False, schema='portfolio')
    op.create_index(op.f('ix_portfolio_prices_id'), 'prices', ['id'], unique=False, schema='portfolio')
    op.drop_table_comment(
        'prices',
        existing_comment='Cached price history from Yahoo Finance',
        schema='portfolio'
    )
    op.alter_column('transactions', 'type',
               existing_type=postgresql.ENUM('BUY', 'SELL', 'DIVIDEND', 'FEE', 'SPLIT', 'TRANSFER_IN', 'TRANSFER_OUT', name='tx_type', schema='portfolio'),
               type_=sa.Enum('BUY', 'SELL', 'DIVIDEND', 'FEE', 'SPLIT', 'TRANSFER_IN', 'TRANSFER_OUT', name='transactiontype'),
               existing_nullable=False,
               schema='portfolio')
    op.alter_column('transactions', 'quantity',
               existing_type=sa.NUMERIC(precision=20, scale=8),
               comment=None,
               existing_comment='Number of shares/units (0 for DIVIDEND/FEE, ratio for SPLIT)',
               existing_nullable=False,
               existing_server_default=sa.text('0'),
               schema='portfolio')
    op.alter_column('transactions', 'price',
               existing_type=sa.NUMERIC(precision=20, scale=8),
               comment=None,
               existing_comment='Price per unit in asset currency',
               existing_nullable=False,
               existing_server_default=sa.text('0'),
               schema='portfolio')
    op.alter_column('transactions', 'fees',
               existing_type=sa.NUMERIC(precision=20, scale=8),
               comment=None,
               existing_comment='Transaction fees/commissions',
               existing_nullable=False,
               existing_server_default=sa.text('0'),
               schema='portfolio')
    op.alter_column('transactions', 'currency',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'USD'::text"),
               schema='portfolio')
    op.alter_column('transactions', 'metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               comment=None,
               existing_comment='Additional data (e.g., split ratio: {"split": "2:1"})',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"),
               schema='portfolio')
    op.drop_index(op.f('idx_transactions_asset'), table_name='transactions', schema='portfolio')
    op.drop_index(op.f('idx_transactions_composite'), table_name='transactions', schema='portfolio')
    op.drop_index(op.f('idx_transactions_date'), table_name='transactions', schema='portfolio')
    op.drop_index(op.f('idx_transactions_portfolio'), table_name='transactions', schema='portfolio')
    op.drop_index(op.f('idx_transactions_type'), table_name='transactions', schema='portfolio')
    op.create_index(op.f('ix_portfolio_transactions_id'), 'transactions', ['id'], unique=False, schema='portfolio')
    op.create_index(op.f('ix_portfolio_transactions_tx_date'), 'transactions', ['tx_date'], unique=False, schema='portfolio')
    op.drop_table_comment(
        'transactions',
        existing_comment='Portfolio transactions (buy, sell, dividends, fees, splits)',
        schema='portfolio'
    )
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               schema='portfolio')
    op.alter_column('users', 'username',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               schema='portfolio')
    op.alter_column('users', 'hashed_password',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               schema='portfolio')
    op.alter_column('users', 'full_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Account active status (separate from email verification)',
               existing_nullable=True,
               existing_server_default=sa.text('true'),
               schema='portfolio')
    op.alter_column('users', 'is_verified',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Email verification status - required for login',
               existing_nullable=True,
               existing_server_default=sa.text('false'),
               schema='portfolio')
    op.alter_column('users', 'verification_token',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('users', 'reset_password_token',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('users', 'daily_report_enabled',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Enable/disable daily PDF report emails',
               existing_nullable=True,
               existing_server_default=sa.text('false'),
               schema='portfolio')
    op.drop_index(op.f('idx_users_email'), table_name='users', schema='portfolio')
    op.drop_index(op.f('idx_users_reset_token'), table_name='users', schema='portfolio')
    op.drop_index(op.f('idx_users_username'), table_name='users', schema='portfolio')
    op.drop_index(op.f('idx_users_verification_token'), table_name='users', schema='portfolio')
    op.drop_constraint(op.f('users_email_key'), 'users', schema='portfolio', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', schema='portfolio', type_='unique')
    op.create_index(op.f('ix_portfolio_users_email'), 'users', ['email'], unique=True, schema='portfolio')
    op.create_index(op.f('ix_portfolio_users_id'), 'users', ['id'], unique=False, schema='portfolio')
    op.create_index(op.f('ix_portfolio_users_reset_password_token'), 'users', ['reset_password_token'], unique=False, schema='portfolio')
    op.create_index(op.f('ix_portfolio_users_username'), 'users', ['username'], unique=True, schema='portfolio')
    op.create_index(op.f('ix_portfolio_users_verification_token'), 'users', ['verification_token'], unique=False, schema='portfolio')
    op.drop_table_comment(
        'users',
        existing_comment='Application users with authentication',
        schema='portfolio'
    )
    op.alter_column('watchlist', 'alert_target_price',
               existing_type=sa.NUMERIC(precision=20, scale=8),
               comment=None,
               existing_comment='Optional price alert threshold',
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('watchlist', 'alert_enabled',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Whether price alerts are enabled for this watchlist item',
               existing_nullable=True,
               existing_server_default=sa.text('false'),
               schema='portfolio')
    op.drop_index(op.f('idx_watchlist_alert_enabled'), table_name='watchlist', schema='portfolio')
    op.drop_index(op.f('idx_watchlist_asset'), table_name='watchlist', schema='portfolio')
    op.drop_index(op.f('idx_watchlist_user'), table_name='watchlist', schema='portfolio')
    op.drop_constraint(op.f('watchlist_user_id_asset_id_key'), 'watchlist', schema='portfolio', type_='unique')
    op.create_index(op.f('ix_portfolio_watchlist_id'), 'watchlist', ['id'], unique=False, schema='portfolio')
    op.drop_table_comment(
        'watchlist',
        existing_comment='User watchlist for tracking assets without owning them',
        schema='portfolio'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        'watchlist',
        'User watchlist for tracking assets without owning them',
        existing_comment=None,
        schema='portfolio'
    )
    op.drop_index(op.f('ix_portfolio_watchlist_id'), table_name='watchlist', schema='portfolio')
    op.create_unique_constraint(op.f('watchlist_user_id_asset_id_key'), 'watchlist', ['user_id', 'asset_id'], schema='portfolio')
    op.create_index(op.f('idx_watchlist_user'), 'watchlist', ['user_id'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_watchlist_asset'), 'watchlist', ['asset_id'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_watchlist_alert_enabled'), 'watchlist', ['alert_enabled'], unique=False, schema='portfolio')
    op.alter_column('watchlist', 'alert_enabled',
               existing_type=sa.BOOLEAN(),
               comment='Whether price alerts are enabled for this watchlist item',
               existing_nullable=True,
               existing_server_default=sa.text('false'),
               schema='portfolio')
    op.alter_column('watchlist', 'alert_target_price',
               existing_type=sa.NUMERIC(precision=20, scale=8),
               comment='Optional price alert threshold',
               existing_nullable=True,
               schema='portfolio')
    op.create_table_comment(
        'users',
        'Application users with authentication',
        existing_comment=None,
        schema='portfolio'
    )
    op.drop_index(op.f('ix_portfolio_users_verification_token'), table_name='users', schema='portfolio')
    op.drop_index(op.f('ix_portfolio_users_username'), table_name='users', schema='portfolio')
    op.drop_index(op.f('ix_portfolio_users_reset_password_token'), table_name='users', schema='portfolio')
    op.drop_index(op.f('ix_portfolio_users_id'), table_name='users', schema='portfolio')
    op.drop_index(op.f('ix_portfolio_users_email'), table_name='users', schema='portfolio')
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], schema='portfolio')
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], schema='portfolio')
    op.create_index(op.f('idx_users_verification_token'), 'users', ['verification_token'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_users_username'), 'users', ['username'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_users_reset_token'), 'users', ['reset_password_token'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False, schema='portfolio')
    op.alter_column('users', 'daily_report_enabled',
               existing_type=sa.BOOLEAN(),
               comment='Enable/disable daily PDF report emails',
               existing_nullable=True,
               existing_server_default=sa.text('false'),
               schema='portfolio')
    op.alter_column('users', 'reset_password_token',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('users', 'verification_token',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('users', 'is_verified',
               existing_type=sa.BOOLEAN(),
               comment='Email verification status - required for login',
               existing_nullable=True,
               existing_server_default=sa.text('false'),
               schema='portfolio')
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Account active status (separate from email verification)',
               existing_nullable=True,
               existing_server_default=sa.text('true'),
               schema='portfolio')
    op.alter_column('users', 'full_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('users', 'hashed_password',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               schema='portfolio')
    op.alter_column('users', 'username',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               schema='portfolio')
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               schema='portfolio')
    op.create_table_comment(
        'transactions',
        'Portfolio transactions (buy, sell, dividends, fees, splits)',
        existing_comment=None,
        schema='portfolio'
    )
    op.drop_index(op.f('ix_portfolio_transactions_tx_date'), table_name='transactions', schema='portfolio')
    op.drop_index(op.f('ix_portfolio_transactions_id'), table_name='transactions', schema='portfolio')
    op.create_index(op.f('idx_transactions_type'), 'transactions', ['type'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_transactions_portfolio'), 'transactions', ['portfolio_id'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_transactions_date'), 'transactions', [sa.literal_column('tx_date DESC')], unique=False, schema='portfolio')
    op.create_index(op.f('idx_transactions_composite'), 'transactions', ['portfolio_id', 'asset_id', 'tx_date'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_transactions_asset'), 'transactions', ['asset_id'], unique=False, schema='portfolio')
    op.alter_column('transactions', 'metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               comment='Additional data (e.g., split ratio: {"split": "2:1"})',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"),
               schema='portfolio')
    op.alter_column('transactions', 'currency',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'USD'::text"),
               schema='portfolio')
    op.alter_column('transactions', 'fees',
               existing_type=sa.NUMERIC(precision=20, scale=8),
               comment='Transaction fees/commissions',
               existing_nullable=False,
               existing_server_default=sa.text('0'),
               schema='portfolio')
    op.alter_column('transactions', 'price',
               existing_type=sa.NUMERIC(precision=20, scale=8),
               comment='Price per unit in asset currency',
               existing_nullable=False,
               existing_server_default=sa.text('0'),
               schema='portfolio')
    op.alter_column('transactions', 'quantity',
               existing_type=sa.NUMERIC(precision=20, scale=8),
               comment='Number of shares/units (0 for DIVIDEND/FEE, ratio for SPLIT)',
               existing_nullable=False,
               existing_server_default=sa.text('0'),
               schema='portfolio')
    op.alter_column('transactions', 'type',
               existing_type=sa.Enum('BUY', 'SELL', 'DIVIDEND', 'FEE', 'SPLIT', 'TRANSFER_IN', 'TRANSFER_OUT', name='transactiontype'),
               type_=postgresql.ENUM('BUY', 'SELL', 'DIVIDEND', 'FEE', 'SPLIT', 'TRANSFER_IN', 'TRANSFER_OUT', name='tx_type', schema='portfolio'),
               existing_nullable=False,
               schema='portfolio')
    op.create_table_comment(
        'prices',
        'Cached price history from Yahoo Finance',
        existing_comment=None,
        schema='portfolio'
    )
    op.drop_index(op.f('ix_portfolio_prices_id'), table_name='prices', schema='portfolio')
    op.drop_index(op.f('ix_portfolio_prices_asof'), table_name='prices', schema='portfolio')
    op.create_index(op.f('idx_prices_source'), 'prices', ['source'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_prices_asset_date_range'), 'prices', ['asset_id', sa.literal_column('asof DESC')], unique=False, schema='portfolio')
    op.create_index(op.f('idx_prices_asset_asof'), 'prices', ['asset_id', sa.literal_column('asof DESC')], unique=True, schema='portfolio')
    op.create_index(op.f('idx_prices_asof'), 'prices', [sa.literal_column('asof DESC')], unique=False, schema='portfolio')
    op.alter_column('prices', 'source',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'yfinance'::text"),
               schema='portfolio')
    op.create_table_comment(
        'portfolios',
        'User investment portfolios',
        existing_comment=None,
        schema='portfolio'
    )
    op.drop_index(op.f('ix_portfolio_portfolios_name'), table_name='portfolios', schema='portfolio')
    op.drop_index(op.f('ix_portfolio_portfolios_id'), table_name='portfolios', schema='portfolio')
    op.create_unique_constraint(op.f('portfolios_user_id_name_key'), 'portfolios', ['user_id', 'name'], schema='portfolio')
    op.create_index(op.f('idx_portfolios_user'), 'portfolios', ['user_id'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_portfolios_name'), 'portfolios', ['name'], unique=False, schema='portfolio')
    op.alter_column('portfolios', 'base_currency',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'EUR'::text"),
               schema='portfolio')
    op.alter_column('portfolios', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               schema='portfolio')
    op.create_table_comment(
        'notifications',
        'User notifications for transaction, login, and price alert events',
        existing_comment=None,
        schema='portfolio'
    )
    op.drop_index(op.f('ix_portfolio_notifications_id'), table_name='notifications', schema='portfolio')
    op.drop_index(op.f('ix_portfolio_notifications_created_at'), table_name='notifications', schema='portfolio')
    op.create_index(op.f('idx_notifications_user_read'), 'notifications', ['user_id', 'is_read'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_notifications_user'), 'notifications', ['user_id'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_notifications_is_read'), 'notifications', ['is_read'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_notifications_created_at'), 'notifications', [sa.literal_column('created_at DESC')], unique=False, schema='portfolio')
    op.alter_column('notifications', 'metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               comment='Additional notification data (e.g., IP address for login, asset info for transactions)',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"),
               schema='portfolio')
    op.alter_column('notifications', 'title',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               schema='portfolio')
    op.alter_column('notifications', 'type',
               existing_type=sa.Enum('TRANSACTION_CREATED', 'TRANSACTION_UPDATED', 'TRANSACTION_DELETED', 'LOGIN', 'PRICE_ALERT', 'DAILY_CHANGE_UP', 'DAILY_CHANGE_DOWN', 'SYSTEM', name='notificationtype'),
               type_=postgresql.ENUM('TRANSACTION_CREATED', 'TRANSACTION_UPDATED', 'TRANSACTION_DELETED', 'LOGIN', 'PRICE_ALERT', 'SYSTEM', 'DAILY_CHANGE_UP', 'DAILY_CHANGE_DOWN', name='notification_type', schema='portfolio'),
               existing_nullable=False,
               schema='portfolio')
    op.create_table_comment(
        'assets',
        'Financial assets with Yahoo Finance ticker symbols',
        existing_comment=None,
        schema='portfolio'
    )
    op.drop_index(op.f('ix_portfolio_assets_symbol'), table_name='assets', schema='portfolio')
    op.drop_index(op.f('ix_portfolio_assets_id'), table_name='assets', schema='portfolio')
    op.create_index(op.f('idx_assets_symbol'), 'assets', ['symbol'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_assets_sector'), 'assets', ['sector'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_assets_logo_fetched'), 'assets', ['logo_fetched_at'], unique=False, schema='portfolio', postgresql_where='(logo_fetched_at IS NOT NULL)')
    op.create_index(op.f('idx_assets_industry'), 'assets', ['industry'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_assets_country'), 'assets', ['country'], unique=False, schema='portfolio')
    op.create_index(op.f('idx_assets_class'), 'assets', ['class'], unique=False, schema='portfolio')
    op.create_unique_constraint(op.f('assets_symbol_key'), 'assets', ['symbol'], schema='portfolio')
    op.alter_column('assets', 'first_transaction_date',
               existing_type=sa.DATE(),
               comment='Date of first transaction for this asset, used to determine when to start fetching historical prices',
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'logo_fetched_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Timestamp when the logo was last fetched/cached',
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'logo_content_type',
               existing_type=sa.VARCHAR(length=100),
               comment='MIME type of the logo (e.g., image/webp, image/svg+xml)',
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'logo_data',
               existing_type=postgresql.BYTEA(),
               comment='Binary logo data (WebP or SVG format)',
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'country',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'asset_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'industry',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'sector',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'class',
               existing_type=sa.Enum('stock', 'etf', 'crypto', 'cash', name='assetclass'),
               type_=postgresql.ENUM('stock', 'etf', 'crypto', 'cash', name='asset_class', schema='portfolio'),
               existing_nullable=True,
               existing_server_default=sa.text("'stock'::portfolio.asset_class"),
               schema='portfolio')
    op.alter_column('assets', 'currency',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'USD'::text"),
               schema='portfolio')
    op.alter_column('assets', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               schema='portfolio')
    op.alter_column('assets', 'symbol',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               schema='portfolio')
    op.create_table('config',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('enable_email', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('smtp_host', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('smtp_port', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('smtp_user', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('smtp_password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('smtp_tls', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('from_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('from_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('frontend_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('config_pkey'))
    )
    # ### end Alembic commands ###
